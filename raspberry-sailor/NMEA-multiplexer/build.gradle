buildscript {
//    ext.scala_version = '2.13.8'
    // ext.pi4j_version = '1.2'  // '2.1.1'
}
plugins {
    id 'java'
    id 'scala'
    id 'idea'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' // version '4.0.2'
}

group = 'raspberry.on.board'
version = '1.0'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://www.datanucleus.org/downloads/maven2" }
}

//compileJava.options.compilerArgs += ["-Xlint:none"]
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

dependencies {
    implementation 'org.rxtx:rxtx:2.1.7'
    implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.0.2'
    implementation 'org.java-websocket:Java-WebSocket:1.5.2'
    implementation 'org.fusesource.jansi:jansi:1.11'
    implementation 'org.yaml:snakeyaml:1.21'
    implementation 'org.xerial:sqlite-jdbc:3.34.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.0'
    implementation 'net.thisptr:jackson-jq:1.0.0-preview.20220705'  // jackson-jq
    implementation project(':raspberry-sailor:NMEA-Parser')
    implementation project(':http-tiny-server')
    implementation project(':common-utils')
    implementation project(':astro-computer:AstroUtilities')
    implementation project(':astro-computer:AstroComputer')

    testImplementation "junit:junit:$junit_version"
    testImplementation 'oracle:xmlparser:2.0'
}

shadowJar {
    zip64 true
}

task runLogAnalyzer(type: JavaExec) {
    description 'Analyze a log file. Use gradlew runLogAnalyzer -Pdatafile=[datafile.nmea]'
    main = 'util.LogAnalyzer'
    classpath = sourceSets.main.runtimeClasspath
    // Another syntax to try:
    //     args project.findProperty('datafile') ?: './default-data-file.nmea'
    if (project.hasProperty('datafile')) { // gradlew -Pdatafile=XXXXX runLogAnalyzer
        args (project.getProperty('datafile'))
    }
}
